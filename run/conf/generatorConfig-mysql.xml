<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 该配置文件说明插件需要如何生成，以及生成对应的包名，路径等信息。
      还有重要的就是我们要生成的实体类所对应的的表或者试图 -->
<generatorConfiguration>
    <!--
    <classPathEntry location="D:\mybatis-generator\mysql-connector-java-5.1.10.jar" />
    -->
    <classPathEntry location="jars/mysql-connector-java-8.0.11.jar"/>
    <context id="MBG" targetRuntime="MyBatis3" defaultModelType="conditional">
        <!-- 注意以下标签的顺序:
                property*,
                plugin*,
                commentGenerator?,
                jdbcConnection,
                javaTypeResolver?,
                javaModelGenerator,
                sqlMapGenerator?,
                javaClientGenerator?,
                table+
        -->
        <property name="autoDelimitKeywords" value="true"/>
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法 -->
        <!--
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />
        -->
        <!-- 给模型生成lombok的@Data注解,以替换getter,setter -->
        <plugin type="com.starxmind.mybatis.generator.extensions.ExtPluginAdapter">
            <property name="hasLombok" value="true"/>
        </plugin>
        <!-- 取数据库表注释 -->
        <commentGenerator type="com.starxmind.mybatis.generator.extensions.ExtCommentGenerator">
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="false"/>
            <!-- 不希望生成的注释中包含时间戳 -->
            <property name="suppressDate" value="false"/>
            <!-- 是否  自动为每一个生成的类创建一个构造方法-->
            <property name="constructorBased" value="false"/>
        </commentGenerator>
        <!-- 数据库连接 -->
        <jdbcConnection
                driverClass="com.mysql.cj.jdbc.Driver"
                connectionURL="jdbc:mysql://hostname:3306/databasename?useSSL=false"
                userId="username"
                password="password">
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>
        <!-- 指定生成的类型为java类型，避免数据库中number等类型字段 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
        <javaModelGenerator targetPackage="com.starxmind.xxx.persistence.model" targetProject="code/model">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--对应的xml mapper文件  -->
        <sqlMapGenerator targetPackage="mapper" targetProject="code/xml">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!-- 对应的dao接口 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.starxmind.xxx.persistence.mapper"
                             targetProject="code/mapper">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator> <!-- 表名对应生成的实体 -->
        <table tableName="%"/>
        <!-- enableCountByExample="false" enableUpdateByExample="false"
        enableDeleteByExample="false" enableSelectByExample="false"
        selectByExampleQueryId="false">  指定是否生成操作数据库对应的方法 -->
    </context>
</generatorConfiguration>